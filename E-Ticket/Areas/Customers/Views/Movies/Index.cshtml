@model IEnumerable<E_Ticket.Models.Movie>

@{
    ViewData["Title"] = "Movies List";
}

<div class="container mt-4">
    <h2 class="text-light mb-4">Movies List</h2>

    <!-- Search Bar -->
    <div class="search-container mb-4">
        <input type="text" id="searchBar" class="search-input" placeholder="Search for movies..." onkeyup="searchMovies()">
        <i class="fas fa-search search-icon"></i>
    </div>

    <div class="row row-cols-1 row-cols-md-3 row-cols-lg-4 g-4" id="moviesContainer">
        @foreach (var item in Model)
        {
            <div class="col movie-item">
                <div class="card movie-card">
                    <img src="~/images/movies/@item.ImgUrl" class="card-img-top movie-poster" alt="@item.Name">
                    <div class="card-body">
                        <h5 class="card-title text-light">@item.Name</h5>
                        <br />
                        <h6 class="card-text text-light">Price : @item.Price EGP</h6>
                        <span class="badge @(item.EndDate < DateOnly.FromDateTime(DateTime.Now) ? "bg-danger" : "bg-success")">
                            @(item.EndDate < DateOnly.FromDateTime(DateTime.Now) ? "Expired" : "Now Showing")
                        </span>

                        <div class="mt-2">
                            <a asp-area="Customers" asp-controller="Movies" asp-action="Details" asp-route-MovieId="@item.Id" class="btn btn-outline-info btn-sm">
                                <i class="fas fa-info-circle"></i> Details
                            </a>

                            <a href="#" target="_blank" class="btn btn-outline-success btn-sm">
                                <i class="fas fa-play"></i> Book Ticket
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script>
    function searchMovies() {
        let input = document.getElementById("searchBar").value.toLowerCase();
        let movies = document.getElementsByClassName("movie-item");

        for (let i = 0; i < movies.length; i++) {
            let title = movies[i].querySelector(".card-title").innerText.toLowerCase();
            if (title.includes(input)) {
                movies[i].style.display = "block";
            } else {
                movies[i].style.display = "none";
            }
        }
    }
</script>

<style>
    body {
        background-color: #141414;
        color: white;
    }

    .movie-card {
        background: #222;
        border-radius: 10px;
        overflow: hidden;
        transition: transform 0.3s ease-in-out;
    }

        .movie-card:hover {
            transform: scale(1.05);
        }

    .movie-poster {
        height: 300px;
        object-fit: cover;
    }

    /* Netflix-style search bar */
    .search-container {
        position: relative;
        max-width: 400px;
        margin: 0 auto;
    }

    .search-input {
        width: 100%;
        padding: 12px 40px 12px 15px;
        border: none;
        border-radius: 50px;
        background: rgba(255, 255, 255, 0.2);
        color: white;
        font-size: 16px;
        outline: none;
        transition: all 0.3s ease-in-out;
    }

        .search-input::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .search-input:focus {
            background: rgba(255, 255, 255, 0.3);
        }

    .search-icon {
        position: absolute;
        top: 50%;
        right: 15px;
        transform: translateY(-50%);
        color: white;
        pointer-events: none;
    }
</style>
